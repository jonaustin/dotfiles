#compdef aider

# Autogenerated completion definition for aider
# Based on aider --help output and common Zsh completion practices.

local context state state_descr line
typeset -A opt_args

# Define completion options for arguments that take specific values
local -a model_options
model_options=(
    'claude-3-opus-20240229'
    'claude-3-5-sonnet-20241022' # Note: Dates seem futuristic, check aider docs if these are correct
    'claude-3-5-haiku-20241022'  # Note: Dates seem futuristic, check aider docs if these are correct
    'gpt-4-0613'
    'gpt-4o'
    'gpt-4o-mini'
    'gpt-4-1106-preview'
    'gpt-3.5-turbo'
    'deepseek/deepseek-chat'
    'o1-mini'
    'o1-preview'
    'o3-mini'
    'openrouter/deepseek/deepseek-r1:free'
    'anthropic/claude-3-7-sonnet-20250219' # Note: Date seems futuristic, check aider docs if this is correct
)

local -a reasoning_effort
reasoning_effort=(
    'low'
    'medium'
    'high'
)

local -a code_themes
# Removed duplicates like solarized-dark/light
code_themes=(
    'default' 'monokai' 'solarized-dark' 'solarized-light' 'bw' 'sas' 'staroffice'
    'xcode' 'github-dark' 'rrt' 'abap' 'algol' 'algol_nu' 'arduino' 'autumn'
    'borland' 'colorful' 'igor' 'lovelace' 'murphy' 'pastie' 'rainbow_dash'
    'stata-light' 'trac' 'vs' 'emacs' 'tango' 'manni' 'gruvbox-light' 'friendly'
    'friendly_grayscale' 'perldoc' 'paraiso-light' 'zenburn' 'nord' 'material'
    'one-dark' 'dracula' 'nord-darker' 'gruvbox-dark' 'stata-dark' 'paraiso-dark'
    'coffee' 'native' 'inkpot' 'fruity' 'vim'
)

local -a map_refresh_options
map_refresh_options=(
    'auto'
    'always'
    'files'
    'manual'
)

local -a line_endings
line_endings=(
    'platform'
    'lf'
    'crlf'
)

local -a voice_formats
voice_formats=(
    'wav'
    'webm'
    'mp3'
)

# Simplified voice languages for brevity, add more if needed
local -a voice_languages
voice_languages=(
    'auto' 'en' 'zh' 'ja' 'es' 'fr' 'de' 'it' 'ru' 'pt' 'ko' 'ar' # Add more ISO 639-1 codes as needed
)

# Simplified editors list
local -a editors
editors=(
    'vim' 'emacs' 'nano' 'code' 'sublime' 'atom' 'gedit' 'kate' 'notepad++'
    'textedit' 'bbedit' 'vscode' 'neovim' 'micro' 'helix' 'kakoune' 'zed' 'lapce'
    'codium' # Add more common editors as needed
)

local -a edit_formats
edit_formats=(
    'diff'
    'whole'
    'search_replace' # Assuming this might be an option, check aider docs
)

# Main completion arguments using _arguments
# Grouped short/long options, removed redundancies, standardized format.
_arguments -C \
    '(-h --help)'{-h,--help}'[Show help message and exit]' \
    '--version[Show the version number and exit]' \
    '(-v --verbose)'{-v,--verbose}'[Enable verbose output]' \
    '--quiet[Disable verbose output]' \
    '(-c --config)'{-c,--config}'[Specify the config file]:config file:_files' \
    '--output[Specify output file]:output file:_files' \
    '--model[Specify the model to use for the main chat]:model:->models' \
    '--opus[Use claude-3-opus-20240229 model]' \
    '--sonnet[Use anthropic/claude-3-7-sonnet-20250219 model]' \
    '--haiku[Use claude-3-5-haiku-20241022 model]' \
    '--4[Use gpt-4-0613 model]' \
    '--4o[Use gpt-4o model]' \
    '--mini[Use gpt-4o-mini model]' \
    '--4-turbo[Use gpt-4-1106-preview model]' \
    '--35turbo[Use gpt-3.5-turbo model]' \
    '--deepseek[Use deepseek/deepseek-chat model]' \
    '--o1-mini[Use o1-mini model]' \
    '--o1-preview[Use o1-preview model]' \
    '--openai-api-key[Specify the OpenAI API key]:openai api key:' \
    '--anthropic-api-key[Specify the Anthropic API key]:anthropic api key:' \
    '--openai-api-base[Specify the api base url]:api base url:' \
    '--openai-api-type[Specify the api type]:api type:' \
    '--openai-api-version[Specify the api version]:api version:' \
    '--openai-api-deployment-id[Specify the api deployment id]:api deployment id:' \
    '--openai-organization-id[Specify the organization id]:organization id:' \
    '--set-env[Set an environment variable (VAR=VAL)]:env var name=value:' \
    '--api-key[Set an API key for a provider (provider=key)]:provider=key:' \
    '--list-models[List known models matching (partial) name]:model name:' \
    '--model-settings-file[Specify file with aider model settings]:model settings file:_files' \
    '--model-metadata-file[Specify file with context window/costs]:model metadata file:_files' \
    '--alias[Add a model alias (alias:model)]:alias:model:' \
    '--verify-ssl[Verify SSL cert when connecting to models]' \
    '--no-verify-ssl[Do not verify SSL cert]' \
    '--timeout[Timeout in seconds for API calls]:timeout:' \
    '--thinking-tokens[Set thinking token budget]:thinking tokens:' \
    '--auto-accept-architect[Enable auto-acceptance of architect changes]' \
    '--no-auto-accept-architect[Disable auto-acceptance of architect changes]' \
    '--check-model-accepts-settings[Check if model accepts settings like reasoning_effort]' \
    '--no-check-model-accepts-settings[Do not check if model accepts settings]' \
    '--git-commit-verify[Enable git pre-commit hooks with --no-verify]' \
    '--no-git-commit-verify[Disable git pre-commit hooks]' \
    '--notifications[Enable terminal bell notifications]' \
    '--no-notifications[Disable terminal bell notifications]' \
    '--notifications-command[Specify command for notifications]:notifications command:' \
    '--edit-format[Specify LLM edit format]:edit format:->edit_formats' \
    '--architect[Use architect edit format]' \
    '--weak-model[Specify model for commits/summarization]:weak model:->models' \
    '--editor-model[Specify model for editor tasks]:editor model:->models' \
    '--editor-edit-format[Specify edit format for editor model]:editor edit format:->edit_formats' \
    '--show-model-warnings[Only work with models having meta-data]' \
    '--no-show-model-warnings[Work with models even without meta-data]' \
    '--max-chat-history-tokens[Soft token limit for chat history]:max chat history tokens:' \
    '--cache-prompts[Enable caching of prompts]' \
    '--no-cache-prompts[Disable caching of prompts]' \
    '--cache-keepalive-pings[Number of pings to keep cache warm]:cache keepalive pings:' \
    '--map-tokens[Suggested tokens for repo map (0=disable)]:map tokens:' \
    '--map-refresh[Control repo map refresh frequency]:map refresh:->map_refresh' \
    '--map-multiplier-no-files[Multiplier for map tokens when no files specified]:map multiplier no files:' \
    '--input-history-file[Specify chat input history file]:input history file:_files' \
    '--chat-history-file[Specify chat history file]:chat history file:_files' \
    '--restore-chat-history[Restore previous chat history]' \
    '--no-restore-chat-history[Do not restore previous chat history]' \
    '--llm-history-file[Log LLM conversation to file]:llm history file:_files' \
    '--dark-mode[Use colors for dark terminal]' \
    '--light-mode[Use colors for light terminal]' \
    '--pretty[Enable pretty, colorized output]' \
    '--no-pretty[Disable pretty, colorized output]' \
    '--stream[Enable streaming responses]' \
    '--no-stream[Disable streaming responses]' \
    '--user-input-color[Set color for user input]:user input color:' \
    '--tool-output-color[Set color for tool output]:tool output color:' \
    '--tool-error-color[Set color for tool error messages]:tool error color:' \
    '--tool-warning-color[Set color for tool warning messages]:tool warning color:' \
    '--assistant-output-color[Set color for assistant output]:assistant output color:' \
    '--completion-menu-color[Set color for completion menu]:completion menu color:' \
    '--completion-menu-bg-color[Set background color for completion menu]:completion menu bg color:' \
    '--completion-menu-current-color[Set color for current item in completion menu]:completion menu current color:' \
    '--completion-menu-current-bg-color[Set background color for current item in completion menu]:completion menu current bg color:' \
    '--code-theme[Set markdown code theme]:code theme:->code_themes' \
    '--show-diffs[Show diffs when committing changes]' \
    '--git[Enable looking for a git repo]' \
    '--no-git[Disable looking for a git repo]' \
    '--gitignore[Enable adding .aider* to .gitignore]' \
    '--no-gitignore[Disable adding .aider* to .gitignore]' \
    '--aiderignore[Specify the aider ignore file]:aider ignore file:_files' \
    '--subtree-only[Only consider files in current git subtree]' \
    '--auto-commits[Enable auto commit of LLM changes]' \
    '--no-auto-commits[Disable auto commit of LLM changes]' \
    '--dirty-commits[Enable commits when repo is dirty]' \
    '--no-dirty-commits[Disable commits when repo is dirty]' \
    '--attribute-author[Attribute aider changes in git author name]' \
    '--no-attribute-author[Do not attribute aider changes in git author name]' \
    '--attribute-committer[Attribute aider commits in git committer name]' \
    '--no-attribute-committer[Do not attribute aider commits in git committer name]' \
    '--attribute-commit-message-author[Prefix commit messages with "aider: " if aider authored]' \
    '--no-attribute-commit-message-author[Do not prefix commit messages if aider authored]' \
    '--attribute-commit-message-committer[Prefix all commit messages with "aider: "]' \
    '--no-attribute-commit-message-committer[Do not prefix all commit messages]' \
    '--commit[Commit pending changes with suitable message, then exit]' \
    '--commit-prompt[Custom prompt for generating commit messages]:commit prompt:' \
    '--dry-run[Perform dry run without modifying files]' \
    '--no-dry-run[Do not perform a dry run]' \
    '--skip-sanity-check-repo[Skip sanity check for git repository]' \
    '--watch-files[Enable watching files for ai coding comments]' \
    '--no-watch-files[Disable watching files]' \
    '--lint[Lint provided files (or dirty files)]' \
    '--lint-cmd[Specify lint commands for languages]:lint cmd:' \
    '--auto-lint[Enable automatic linting after changes]' \
    '--no-auto-lint[Disable automatic linting]' \
    '--test-cmd[Specify command to run tests]:test cmd:' \
    '--auto-test[Enable automatic testing after changes]' \
    '--no-auto-test[Disable automatic testing]' \
    '--test[Run tests, fix problems, then exit]' \
    '--analytics[Enable analytics for current session]' \
    '--no-analytics[Disable analytics for current session]' \
    '--analytics-log[Specify file to log analytics events]:analytics log file:_files' \
    '--analytics-disable[Permanently disable analytics]' \
    '--just-check-update[Check for updates and exit with status code]' \
    '--check-update[Check for new aider versions on launch]' \
    '--no-check-update[Do not check for new versions]' \
    '--show-release-notes[Show release notes on first run of new version]' \
    '--no-show-release-notes[Do not show release notes]' \
    '--install-main-branch[Install latest version from main branch]' \
    '--upgrade[Upgrade aider from PyPI]' \
    '--message[Single message to send LLM, then exit]:message:' \
    '--message-file[File containing message to send LLM, then exit]:message file:_files' \
    '--gui[Run aider in your browser (same as --browser)]' \
    '--no-gui[Do not run aider in browser (same as --no-browser)]' \
    '--browser[Run aider in your browser]' \
    '--no-browser[Do not run aider in browser]' \
    '--copy-paste[Enable auto copy/paste between aider and web UI]' \
    '--no-copy-paste[Disable auto copy/paste]' \
    '--apply[Apply changes from file instead of running chat]:apply file:_files' \
    '--apply-clipboard-edits[Apply clipboard contents as edits]' \
    '--exit[Do startup activities then exit]' \
    '--show-repo-map[Print repo map and exit]' \
    '--show-prompts[Print system prompts and exit]' \
    '--voice-format[Audio format for voice recording]:voice format:->voice_formats' \
    '--voice-language[Language for voice (ISO 639-1)]:voice language:->voice_languages' \
    '--voice-input-device[Input device name for voice recording]:voice input device:' \
    '--file[Specify a file to edit]:file:_files' \
    '--read[Specify a read-only file]:read file:_files' \
    '--vim[Use VI editing mode in terminal]' \
    '--chat-language[Language to use in chat]:chat language:' \
    '--yes-always[Always say yes to confirmations]' \
    '--load[Load and execute /commands from file on launch]:load file:_files' \
    '--encoding[Specify encoding for input/output]:encoding:' \
    '--line-endings[Line endings for writing files]:line endings:->line_endings' \
    '--env-file[Specify .env file to load]:env file:_files' \
    '--suggest-shell-commands[Enable suggesting shell commands]' \
    '--no-suggest-shell-commands[Disable suggesting shell commands]' \
    '--fancy-input[Enable fancy input with history/completion]' \
    '--no-fancy-input[Disable fancy input]' \
    '--multiline[Enable multi-line input (Meta-Enter to submit)]' \
    '--no-multiline[Disable multi-line input]' \
    '--detect-urls[Enable detection/offering to add URLs]' \
    '--no-detect-urls[Disable detection/offering to add URLs]' \
    '--editor[Specify editor for /editor command]:editor:->editors' \
    '--reasoning-effort[Specify reasoning effort level]:reasoning effort:->reasoning_effort' \
    '*:files:_files' # Catch-all for positional arguments (files)

# Define completion functions for specific argument types
# This allows using ->completion_type in _arguments
case $state in
    (models)
        _describe 'model options' model_options
        ;;
    (reasoning_effort)
        _describe 'reasoning effort levels' reasoning_effort
        ;;
    (code_themes)
        _describe 'code themes' code_themes
        ;;
    (map_refresh)
        _describe 'map refresh options' map_refresh_options
        ;;
    (line_endings)
        _describe 'line ending options' line_endings
        ;;
    (voice_formats)
        _describe 'voice format options' voice_formats
        ;;
    (voice_languages)
        _describe 'voice language options' voice_languages
        ;;
    (editors)
        _describe 'editor options' editors
        ;;
    (edit_formats)
        _describe 'edit format options' edit_formats
        ;;
esac

return 0
